id: ingest-holidays
namespace: ingest-holidays
description: |
  This flow is to ingest holidays of 2024 from holidayapi server into public schema.

variables:
  db_host: "postgres"
  db_database: "kestra"
  db_user: "kestra"
  db_password: "k3str4"
  url1: "https://holidayapi.com/v1/countries"
  url2: "https://holidayapi.com/v1/holidays"
  key: "c399fea4-30d3-494f-94ca-da317f853727"
  year: "2024"
  pretty: "true"

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://postgres:5432/kestra
      username: kestra
      password: k3str4

triggers:
  - id: hourly
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "@hourly"

tasks:
  - id: fetch_holidays
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    outputFiles:
      - holidays_2024.csv
    description: This task is to fetch hoildays from 2024 in holidayapi and save as output csv file in kestra
    script: |
      import requests                                                                                                 
      import pandas as pd
      params1 = { "key": "{{ vars.key}}"  }
      response1 = requests.get("{{ vars.url1}}", params=params1)  

      def get_country_codes():
        # Extract countries from holidayapi
        if response1.status_code == 200:
          data = response1.json()
          countries_data = data.get("countries", {})
        country_codes = [country.get("code") for country in countries_data]
        return country_codes   

      def get_holidays():                                                                     
        countries =  get_country_codes()                                                                                                                                                    
        all_holidays_df = pd.DataFrame()                                                                                
        for country_code in countries:                                                                                                                                           
          params = {                                                                                                  
              "key": "{{ vars.key}}",                                         
              "country": country_code,                                                 
              "year": "{{ vars.year}}",                                                                 
              "pretty": "{{ vars.pretty}}",                                                  
          }                                                                                                                                                                                              
          response2 = requests.get("{{ vars.url2}}", params=params)                                                                                                                                                                                                                            
          if response2.status_code == 200:                                                                             
          # Parse the JSON response                                                                               
            data = response2.json()                                                                                  
            holidays_data = []                                                                                      
            for h in data.get("holidays", []):                                                                      
              holiday = {"Date": h["date"], "Name": h["name"], "Public": h["public"]}                             
              holidays_data.append(holiday)                                                                                                                    
            holidays_data_df = pd.DataFrame(holidays_data)                                                                        
            holidays_data_df['country'] =  country_code                                                                           
            all_holidays_df = pd.concat([all_holidays_df, holidays_data_df], ignore_index=True) 
            all_holidays_df.to_csv("holidays_2024.csv", index=False)                                                                                                                                        
          else:                                                                                                       
                print(f"Failed to fetch data: {response2.status_code}")
      get_holidays()

  - id: create_holidays_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      CREATE TABLE IF NOT EXISTS holidays_2024 
      (
        Date DATE,
        Holiday_Name TEXT,
        Public BOOL,
        country TEXT
        );
  - id: truncate_holidays_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      TRUNCATE TABLE holidays_2024;

  - id: load_holidays_table
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    beforeCommands:
      - pip install psycopg2-binary
    warningOnStdErr: false
    script: |
      import pandas as pd
      import psycopg2
      conn = psycopg2.connect(
        host="{{ vars.db_host }}",
        database="{{ vars.db_database }}",
        user="{{ vars.db_user }}",
        password="{{ vars.db_password }}"
      )
      cursor = conn.cursor()
      holidays_data = pd.read_csv('{{ outputs.fetch_holidays.outputFiles['holidays_2024.csv'] }}')
      for index, row in holidays_data.iterrows():
          cursor.execute(
            """
            INSERT INTO  holidays_2024
            (
              Date, Holiday_Name, Public, country
              ) 
              VALUES (%s, %s, %s, %s  )
        """,
        (
            row['Date'],
            row['Name'],
            row['Public'],
            row['country'],
        )
        )

      conn.commit()   
      cursor.execute("SELECT COUNT(*) FROM holidays_2024")
      row_count = cursor.fetchone()[0]
      print(f"Inserted {row_count} rows into the holidays_2024 table.")

      cursor.close()
      conn.close()
